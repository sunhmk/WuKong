<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.sun</groupId>
	<artifactId>WuKong</artifactId>
	<packaging>pom</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>WuKong</name>
	<url>http://maven.apache.org</url>
	<properties>
		<junit.version>4.12</junit.version>
		<maven.version>3.3.9</maven.version>
		<java.version>1.8</java.version>
		<scala.version>2.11.8</scala.version>
		<scala.binary.version>2.11</scala.binary.version>

		<javaxservlet.version>3.1.0</javaxservlet.version>
		<jetty.version>9.4.2.v20170220</jetty.version>
		<!-- Package to use when relocating shaded classes. -->
		<wukong.shade.packageName>org.wukong_project</wukong.shade.packageName>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<PermGen>64m</PermGen>
		<MaxPermGen>512m</MaxPermGen>
		<CodeCacheSize>512m</CodeCacheSize>
		<test.java.home>${java.home}</test.java.home>
		<test.exclude.tags></test.exclude.tags>
		<maven-antrun.version>1.8</maven-antrun.version>
		<build.testJarPhase>prepare-package</build.testJarPhase>
		<maven.assembly.version>2.6</maven.assembly.version>
		<jars.target.dir>${project.build.directory}/scala-${scala.binary.version}/jars</jars.target.dir>
	</properties>
	<developers>
		<developer>
			<id>sunhmk</id>
			<name>sun dasheng</name>
			<email>yijiantongming@163.com</email>
		</developer>
	</developers>
	<dependencies>
		<dependency>
			<groupId>org.spark-project.spark</groupId>
			<artifactId>unused</artifactId>
			<version>1.0.0</version>
		</dependency>
		<!-- This is needed by the scalatest plugin, and so is declared here to 
			be available in all child modules, just as scalatest is run in all children -->
		<dependency>
			<groupId>org.scalatest</groupId>
			<artifactId>scalatest_${scala.binary.version}</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.novocode</groupId>
			<artifactId>junit-interface</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>
	<repositories>
		<repository>
			<id>central</id>
			<!-- This should be at top, it makes maven try the central repo first 
				and then others and hence faster dep resolution -->
			<name>Maven Repository</name>
			<url>https://repo1.maven.org/maven2</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>central</id>
			<url>https://repo1.maven.org/maven2</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>
	<build>
		<pluginManagement>
			<plugins>
				<!-- 配置编译版本限制 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>1.4.1</version>
					<executions>
						<execution>
							<id>enforce-versions</id>
							<goals>
								<goal>enforce</goal>
							</goals>
							<configuration>
								<rules>
									<requireMavenVersion>
										<version>${maven.version}</version>
									</requireMavenVersion>
									<requireJavaVersion>
										<version>${java.version}</version>
									</requireJavaVersion>
								</rules>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<!-- 多源码制定:添加额外的源码 -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>1.10</version>
				</plugin>
				<!-- scala:is used for compiling/testing/running/documenting scala code 
					of any maven project. -->
				<plugin>
					<groupId>net.alchim31.maven</groupId>
					<artifactId>scala-maven-plugin</artifactId>
					<version>3.2.2</version>
					<executions>
						<execution>
							<id>eclipse-add-source</id>
							<goals>
								<goal>add-source</goal>
							</goals>
						</execution>
						<execution>
							<id>scala-compile-first</id>
							<phase>process-resources</phase>
							<goals>
								<goal>compile</goal>
							</goals>
						</execution>
						<execution>
							<id>scala-test-compile-first</id>
							<phase>process-test-resources</phase>
							<goals>
								<goal>testCompile</goal>
							</goals>
						</execution>
						<execution>
							<id>attach-scaladocs</id>
							<phase>verify</phase>
							<goals>
								<goal>doc-jar</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<scalaVersion>${scala.version}</scalaVersion>
						<recompileMode>incremental</recompileMode>
						<useZincServer>true</useZincServer>
						<args>
							<arg>-unchecked</arg>
							<arg>-deprecation</arg>
							<arg>-feature</arg>
						</args>
						<jvmArgs>
							<jvmArg>-Xms1024m</jvmArg>
							<jvmArg>-Xmx1024m</jvmArg>
							<jvmArg>-XX:PermSize=${PermGen}</jvmArg>
							<jvmArg>-XX:MaxPermSize=${MaxPermGen}</jvmArg>
							<jvmArg>-XX:ReservedCodeCacheSize=${CodeCacheSize}</jvmArg>
						</jvmArgs>
						<javacArgs>
							<javacArg>-source</javacArg>
							<javacArg>${java.version}</javacArg>
							<javacArg>-target</javacArg>
							<javacArg>${java.version}</javacArg>
							<javacArg>-Xlint:all,-serial,-path</javacArg>
						</javacArgs>
					</configuration>
				</plugin>
				<!-- 编译 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.5.1</version>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
						<encoding>UTF-8</encoding>
						<maxmem>1024m</maxmem>
						<fork>true</fork>
						<compilerArgs>
							<arg>-Xlint:all,-serial,-path</arg>
						</compilerArgs>
					</configuration>
				</plugin>
				<!-- 测试 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.19.1</version>
					<!-- Note config is repeated in scalatest config -->
					<configuration>
						<includes>
							<include>**/Test*.java</include>
							<include>**/*Test.java</include>
							<include>**/*TestCase.java</include>
							<include>**/*Suite.java</include>
						</includes>
						<reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
						<argLine>-Xmx3g -Xss4096k -XX:MaxPermSize=${MaxPermGen}
							-XX:ReservedCodeCacheSize=512m</argLine>
						<environmentVariables>
							<!-- Setting SPARK_DIST_CLASSPATH is a simple way to make sure any 
								child processes launched by the tests have access to the correct test-time 
								classpath. -->
							<SPARK_DIST_CLASSPATH>${test_classpath}</SPARK_DIST_CLASSPATH>
							<SPARK_PREPEND_CLASSES>1</SPARK_PREPEND_CLASSES>
							<SPARK_SCALA_VERSION>${scala.binary.version}</SPARK_SCALA_VERSION>
							<SPARK_TESTING>1</SPARK_TESTING>
							<JAVA_HOME>${test.java.home}</JAVA_HOME>
						</environmentVariables>
						<systemProperties>
							<log4j.configuration>file:src/test/resources/log4j.properties</log4j.configuration>
							<derby.system.durability>test</derby.system.durability>
							<java.awt.headless>true</java.awt.headless>
							<java.io.tmpdir>${project.build.directory}/tmp</java.io.tmpdir>
							<wukong.testing>1</wukong.testing>
							<!-- Needed by sql/hive tests. -->
							<test.src.tables>src</test.src.tables>
						</systemProperties>
						<failIfNoTests>false</failIfNoTests>
						<excludedGroups>${test.exclude.tags}</excludedGroups>
					</configuration>
					<executions>
						<execution>
							<id>test</id>
							<goals>
								<goal>test</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- Scalatest runs all Scala tests -->
				<plugin>
					<groupId>org.scalatest</groupId>
					<artifactId>scalatest-maven-plugin</artifactId>
					<version>1.0</version>
					<!-- Note config is repeated in surefire config -->
					<configuration>
						<reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
						<junitxml>.</junitxml>
						<filereports>basejettyTestSuite.txt</filereports>
						<argLine>
							-ea -Xmx3g -XX:MaxPermSize=${MaxPermGen}
							<!-- -XX:ReservedCodeCacheSize=${CodeCacheSize} -->
						</argLine>
						<stderr />
						<environmentVariables>
							<!-- Setting SPARK_DIST_CLASSPATH is a simple way to make sure any 
								child processes launched by the tests have access to the correct test-time 
								classpath. -->

							<JAVA_HOME>${test.java.home}</JAVA_HOME>
						</environmentVariables>
						<systemProperties>
							<log4j.configuration>file:src/test/resources/log4j.properties</log4j.configuration>
							<derby.system.durability>test</derby.system.durability>
							<java.awt.headless>true</java.awt.headless>
							<java.io.tmpdir>${project.build.directory}/tmp</java.io.tmpdir>

						</systemProperties>
						<tagsToExclude>${test.exclude.tags}</tagsToExclude>
					</configuration>
					<executions>
						<execution>
							<id>test</id>
							<goals>
								<goal>test</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.6</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>${maven-antrun.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.4</version>
					<configuration>
						<attach>true</attach>
					</configuration>
					<executions>
						<execution>
							<id>create-source-jar</id>
							<goals>
								<goal>jar-no-fork</goal>
								<goal>test-jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.0.0</version>
					<configuration>
						<filesets>
							<fileset>
								<directory>work</directory>
							</fileset>
							<fileset>
								<directory>checkpoint</directory>
							</fileset>
							<fileset>
								<directory>lib_managed</directory>
							</fileset>
						</filesets>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>2.10.3</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>1.4.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.6</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<version>2.4.3</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.5.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.8.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<executions>
						<execution>
							<id>default-cli</id>
							<goals>
								<goal>build-classpath</goal>
							</goals>
							<configuration>
								<!-- This includes dependencies with 'runtime' and 'compile' scopes; 
									see the docs for includeScope for more details -->
								<includeScope>runtime</includeScope>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<!-- This plugin's configuration is used to store Eclipse m2e settings 
					only. -->
				<!-- It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-dependency-plugin</artifactId>
										<versionRange>[2.8,)</versionRange>
										<goals>
											<goal>build-classpath</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-jar-plugin</artifactId>
										<versionRange>[2.6,)</versionRange>
										<goals>
											<goal>test-jar</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[${maven-antrun.version},)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.5.1</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- This plugin dumps the test classpath into a file -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.10</version>
				<executions>
					<execution>
						<id>generate-test-classpath</id>
						<phase>test-compile</phase>
						<goals>
							<goal>build-classpath</goal>
						</goals>
						<configuration>
							<includeScope>test</includeScope>
							<outputProperty>test_classpath</outputProperty>
						</configuration>
					</execution>
					<execution>
						<id>copy-module-dependencies</id>
						<phase>${build.copyDependenciesPhase}</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>runtime</includeScope>
							<outputDirectory>${jars.target.dir}</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- The shade plug-in is used here to create effective pom's (see SPARK-3812), 
				and also remove references from the shaded libraries from artifacts published 
				by Spark. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<configuration>
					<shadedArtifactAttached>false</shadedArtifactAttached>
					<artifactSet>
						<includes>
							<include>org.spark-project.spark:unused</include>
							<include>org.eclipse.jetty:jetty-io</include>
							<include>org.eclipse.jetty:jetty-http</include>
							<include>org.eclipse.jetty:jetty-proxy</include>
							<include>org.eclipse.jetty:jetty-client</include>
							<include>org.eclipse.jetty:jetty-continuation</include>
							<include>org.eclipse.jetty:jetty-servlet</include>
							<include>org.eclipse.jetty:jetty-servlets</include>
							<include>org.eclipse.jetty:jetty-plus</include>
							<include>org.eclipse.jetty:jetty-security</include>
							<include>org.eclipse.jetty:jetty-util</include>
							<include>org.eclipse.jetty:jetty-server</include>
							<include>com.google.guava:guava</include>
						</includes>
					</artifactSet>
					<relocations>
						<relocation>
							<pattern>org.eclipse.jetty</pattern>
							<shadedPattern>${wukong.shade.packageName}.jetty</shadedPattern>
							<includes>
								<include>org.eclipse.jetty.**</include>
							</includes>
						</relocation>
						<relocation>
							<pattern>com.google.common</pattern>
							<shadedPattern>${wukong.shade.packageName}.guava</shadedPattern>
						</relocation>
					</relocations>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>scala-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.scalastyle</groupId>
				<artifactId>scalastyle-maven-plugin</artifactId>
				<version>0.8.0</version>
				<configuration>
					<verbose>false</verbose>
					<failOnViolation>false</failOnViolation>
					<includeTestSourceDirectory>false</includeTestSourceDirectory>
					<failOnWarning>false</failOnWarning>
					<sourceDirectory>${basedir}/src/main/scala</sourceDirectory>
					<testSourceDirectory>${basedir}/src/test/scala</testSourceDirectory>
					<configLocation>scalastyle-config.xml</configLocation>
					<outputFile>${basedir}/target/scalastyle-output.xml</outputFile>
					<inputEncoding>${project.build.sourceEncoding}</inputEncoding>
					<outputEncoding>${project.reporting.outputEncoding}</outputEncoding>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.17</version>
				<configuration>
					<verbose>false</verbose>
					<failOnViolation>false</failOnViolation>
					<includeTestSourceDirectory>true</includeTestSourceDirectory>
					<failOnWarning>false</failOnWarning>
					<sourceDirectories>${basedir}/src/main/java,${basedir}/src/main/scala</sourceDirectories>
					<testSourceDirectory>${basedir}/src/test/java</testSourceDirectory>
					<configLocation>dev/checkstyle.xml</configLocation>
					<outputFile>${basedir}/target/checkstyle-output.xml</outputFile>
					<inputEncoding>${project.build.sourceEncoding}</inputEncoding>
					<outputEncoding>${project.reporting.outputEncoding}</outputEncoding>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>create-tmp-dir</id>
						<phase>generate-test-resources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<mkdir dir="${project.build.directory}/tmp" />
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Enable surefire and scalatest in all children, in one place: -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.scalatest</groupId>
				<artifactId>scalatest-maven-plugin</artifactId>
			</plugin>
			<!-- Build test-jar's for all projects, since some projects depend on 
				tests from others -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<executions>
					<execution>
						<id>prepare-test-jar</id>
						<phase>${build.testJarPhase}</phase>
						<goals>
							<goal>test-jar</goal>
						</goals>
						<configuration>
							<excludes>
								<exclude>log4j.properties</exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.novocode</groupId>
				<artifactId>junit-interface</artifactId>
				<version>0.11</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${javaxservlet.version}</version>
			</dependency>
			<dependency>
				<groupId>org.scalacheck</groupId>
				<artifactId>scalacheck_${scala.binary.version}</artifactId>
				<version>1.12.5</version> <!-- 1.13.0 appears incompatible with scalatest 2.2.6 -->
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-http</artifactId>
				<version>${jetty.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-continuation</artifactId>
				<version>${jetty.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-servlet</artifactId>
				<version>${jetty.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-servlets</artifactId>
				<version>${jetty.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-proxy</artifactId>
				<version>${jetty.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-client</artifactId>
				<version>${jetty.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-util</artifactId>
				<version>${jetty.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-security</artifactId>
				<version>${jetty.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-plus</artifactId>
				<version>${jetty.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-server</artifactId>
				<version>${jetty.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.scala-lang</groupId>
				<artifactId>scala-compiler</artifactId>
				<version>${scala.version}</version>
			</dependency>
			<dependency>
				<groupId>org.scala-lang</groupId>
				<artifactId>scala-reflect</artifactId>
				<version>${scala.version}</version>
			</dependency>
			<dependency>
				<groupId>org.scala-lang</groupId>
				<artifactId>scala-library</artifactId>
				<version>${scala.version}</version>
			</dependency>
			<dependency>
				<groupId>org.scala-lang</groupId>
				<artifactId>scala-actors</artifactId>
				<version>${scala.version}</version>
			</dependency>
			<dependency>
				<groupId>org.scala-lang</groupId>
				<artifactId>scalap</artifactId>
				<version>${scala.version}</version>
			</dependency>
			<dependency>
				<groupId>org.scalatest</groupId>
				<artifactId>scalatest_${scala.binary.version}</artifactId>
				<version>2.2.6</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>21.0</version>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<modules>
		<module>base-utils</module>
		<module>base-io</module>
		<module>base-thread</module>
		<module>base-pb</module>
		<module>base-jetty</module>
		<module>base-netty</module>
		<module>base-grpc</module>
		<module>wukong-assembly</module>
		<module>base-annotation</module>
		<module>base-proxy</module>
		<module>base-reflection</module>
		<module>base-log</module>
		<module>base-commonspool</module>
	</modules>
	<profiles>
		<profile>
			<id>scala-2.11</id>
			<activation>
				<property>
					<name>!scala-2.10</name>
				</property>
			</activation>
			<properties>
				<scala.version>2.11.8</scala.version>
				<scala.binary.version>2.11</scala.binary.version>
				<jline.version>2.12.1</jline.version>
				<jline.groupid>jline</jline.groupid>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
						<executions>
							<execution>
								<id>enforce-versions</id>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<bannedDependencies>
											<excludes combine.children="append">
												<exclude>*:*_2.10</exclude>
											</excludes>
										</bannedDependencies>
									</rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- profile> <id>java8-tests</id> <activation> <jdk>[1.8,)</jdk> </activation> 
			<modules> <module>external/java8-tests</module> </modules> </profile -->
	</profiles>
</project>